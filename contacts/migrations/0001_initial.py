# Generated by Django 3.2.14 on 2022-07-22 07:02

import autoslug.fields
import contacts.mixins
import contacts.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import model_utils.fields
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('first_name', models.CharField(help_text='Critical. Please make sure it is correct', max_length=32, verbose_name='first name')),
                ('last_name', models.CharField(help_text='Critical. Please make sure it is correct', max_length=32, verbose_name='last name')),
                ('slug_name', autoslug.fields.AutoSlugField(editable=False, max_length=64, populate_from=contacts.models._person_slug_fields, unique=True)),
                ('sub_name', models.CharField(default='0', editable=False, max_length=1)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undefined')], default='U', max_length=1, verbose_name='gender')),
                ('partner', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('S', 'Single'), ('U', 'Undefined')], default='U', max_length=1, verbose_name='partner status')),
                ('status', model_utils.fields.StatusField(choices=[('draft', 'draft'), ('confirmed', 'confirmed')], default='draft', editable=False, max_length=100, no_check_for_status=True)),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, editable=False, monitor='status')),
                ('confirmed_on', model_utils.fields.MonitorField(default=django.utils.timezone.now, editable=False, monitor='status', when={'confirmed'})),
                ('owner_entity', models.PositiveBigIntegerField(editable=False)),
                ('owner_department', models.PositiveBigIntegerField(editable=False)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
                'permissions': [('unlink_person', 'Can unlink person')],
            },
            bases=(models.Model, contacts.mixins.RegistrationDataMixin),
        ),
        migrations.CreateModel(
            name='PersonTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=16)),
                ('entity', models.PositiveBigIntegerField(editable=False)),
            ],
            options={
                'ordering': ['entity', 'title'],
                'permissions': [('unlink_persontitle', 'Can unlink person title')],
            },
            bases=(models.Model, contacts.mixins.RegistrationDataMixin),
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='persons', to='contacts.person')),
            ],
            options={
                'ordering': ['phone_number'],
                'unique_together': {('phone_number',)},
            },
            bases=(models.Model, contacts.mixins.RegistrationDataMixin),
        ),
        migrations.CreateModel(
            name='PersonGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Important. Must be unique for your entity', max_length=20, verbose_name='group')),
                ('entity', models.PositiveBigIntegerField(editable=False)),
            ],
            options={
                'ordering': ['entity', 'name'],
                'permissions': [('unlink_persongroup', 'Can unlink person group')],
                'unique_together': {('entity', 'name')},
            },
            bases=(models.Model, contacts.mixins.RegistrationDataMixin),
        ),
        migrations.CreateModel(
            name='PersonFunction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('function', models.CharField(help_text='Important. Please make sure it is correct', max_length=48)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='functions', to='contacts.person')),
            ],
            bases=(models.Model, contacts.mixins.RegistrationDataMixin),
        ),
        migrations.AddField(
            model_name='person',
            name='person_group',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, to='contacts.persongroup'),
        ),
        migrations.AddField(
            model_name='person',
            name='title',
            field=models.ForeignKey(help_text='Critical. Please make sure it is correct', on_delete=django.db.models.deletion.DO_NOTHING, to='contacts.persontitle', verbose_name='title'),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=128)),
                ('city', models.CharField(blank=True, max_length=32)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2)),
                ('zip_code', models.CharField(blank=True, max_length=16)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='contacts.person')),
                ('phone', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='location_phone_numbers', to='contacts.phonenumber')),
            ],
            options={
                'ordering': ['address'],
            },
            bases=(models.Model, contacts.mixins.RegistrationDataMixin),
        ),
        migrations.CreateModel(
            name='EmailAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_address', models.EmailField(max_length=254)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_addresses', to='contacts.person')),
            ],
            options={
                'ordering': ['email_address'],
                'unique_together': {('email_address',)},
            },
            bases=(models.Model, contacts.mixins.RegistrationDataMixin),
        ),
        migrations.AlterUniqueTogether(
            name='person',
            unique_together={('owner_entity', 'first_name', 'last_name', 'sub_name')},
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('nickname', models.CharField(blank=True, max_length=50, null=True, verbose_name='nickname')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=64, populate_from='name', unique=True)),
                ('about', models.TextField(blank=True, null=True, verbose_name='about')),
                ('web_site', models.URLField()),
                ('email_address', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='organisation_email_addresses', to='contacts.emailaddress')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='organisation_locations', to='contacts.location')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organisations', to='contacts.person')),
                ('phone_number', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='organisation_phone_numbers', to='contacts.phonenumber')),
            ],
            options={
                'unique_together': {('name',)},
            },
            bases=(models.Model, contacts.mixins.RegistrationDataMixin),
        ),
    ]
